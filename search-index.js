var searchIndex = JSON.parse('{\
"sorbus":{"doc":"A generic library for lossless syntax trees.","i":[[3,"Kind","sorbus","Raw kind tag for each element in the tree.",null,null],[12,"0","","",0,null],[4,"NodeOrToken","","Enum wrapping either a node or a token.",null,null],[13,"Node","","",1,null],[13,"Token","","",1,null],[0,"green","","The green tree is an immutable, persistent, atomically…",null,null],[3,"Builder","sorbus::green","Construction cache for green tree elements.",null,null],[3,"Children","","Children elements of a node in the immutable green tree.",null,null],[3,"ChildrenWithOffsets","","Children elements of a node in the immutable green tree,…",null,null],[3,"Node","","A nonleaf node in the immutable green tree.",null,null],[3,"Token","","A leaf token in the immutable green tree.",null,null],[3,"Checkpoint","","Checkpoint for maybe wrapping a node. See…",null,null],[3,"TreeBuilder","","Top-down builder context for a green tree.",null,null],[11,"new","","Create a new builder.",2,[[]]],[11,"size","","The number of cached elements.",2,[[]]],[11,"node","","Create a new node or clone a new Arc to an existing…",2,[[["kind",3]],[["node",3],["arc",3]]]],[11,"token","","Create a new token or clone a new Arc to an existing…",2,[[["kind",3]],[["arc",3],["token",3]]]],[11,"gc","","Collect all cached nodes that are no longer live outside…",2,[[]]],[11,"peek","","Get the next item in the iterator without advancing it.",3,[[],["option",4]]],[11,"get","","Get the nth item in the iterator without advancing it.",3,[[],["option",4]]],[11,"split_at","","Divide this iterator into two at an index.",3,[[]]],[11,"peek","","Get the next item in the iterator without advancing it.",4,[[],["option",4]]],[11,"get","","Get the nth item in the iterator without advancing it.",4,[[],["option",4]]],[11,"split_at","","Divide this iterator into two at an index.",4,[[]]],[11,"with_offsets","","Iterate the children with their offsets from the parent…",3,[[],["childrenwithoffsets",3]]],[11,"without_offsets","","Iterate the children without their offsets.",4,[[],["children",3]]],[11,"kind","","The kind of this node.",5,[[],["kind",3]]],[11,"len","","The length of text at this node.",5,[[],["textsize",3]]],[11,"children","","Child elements of this node.",5,[[],["children",3]]],[11,"index_of_offset","","The index of the child that contains the given offset.",5,[[["textsize",3]]]],[11,"kind","","The kind of this token.",6,[[],["kind",3]]],[11,"text","","The text of this token.",6,[[]]],[11,"len","","The length of text at this token.",6,[[],["textsize",3]]],[11,"new","","Create a new builder.",7,[[]]],[11,"new_with","","Create a new builder, reusing a `Builder` cache.",7,[[["builder",3]]]],[11,"builder","","The `Builder` used to create and deduplicate nodes.",7,[[],["builder",3]]],[11,"add","","Add an element to the current branch.",7,[[]]],[11,"token","","Add a new token to the current branch.",7,[[["kind",3]]]],[11,"node","","Add a new node to the current branch.",7,[[["kind",3]]]],[11,"start_node","","Start a new child node and make it the current branch.",7,[[["kind",3]]]],[11,"finish_node","","Finish the current branch and restore its parent as current.",7,[[]]],[11,"checkpoint","","Prepare for maybe wrapping the next node.",7,[[],["checkpoint",3]]],[11,"start_node_at","","Wrap the elements added after `checkpoint` in a new node,…",7,[[["kind",3],["checkpoint",3]]]],[11,"finish_node_at","","Finish the current branch up to a given checkpoint, and…",7,[[["checkpoint",3]]]],[11,"finish","","Complete the current tree building.",7,[[],[["node",3],["arc",3]]]],[11,"recycle","","Destroy this tree builder and recycle its build cache.",7,[[],["builder",3]]],[11,"into_node","sorbus","",1,[[],["option",4]]],[11,"as_node","","",1,[[],["option",4]]],[11,"is_node","","",1,[[]]],[11,"unwrap_node","","",1,[[]]],[11,"into_token","","",1,[[],["option",4]]],[11,"as_token","","",1,[[],["option",4]]],[11,"is_token","","",1,[[]]],[11,"unwrap_token","","",1,[[]]],[11,"as_ref","","",1,[[],["nodeortoken",4]]],[11,"as_deref","","",1,[[],["nodeortoken",4]]],[11,"kind","","",1,[[],["kind",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"unerase","","",0,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"unerase","","",1,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","sorbus::green","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"unerase","","",2,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"unerase","","",3,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"unerase","","",4,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"unerase","","",5,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"unerase","","",6,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"unerase","","",8,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"unerase","","",7,[[["nonnull",3],["erased",3]],["nonnull",3]]],[11,"drop","","",5,[[]]],[11,"from","sorbus","",1,[[["node",3],["arc",3]]]],[11,"from","","",1,[[["arc",3],["token",3]]]],[11,"from","","",1,[[["node",3]]]],[11,"from","","",1,[[["token",3]]]],[11,"from","","",1,[[["nodeortoken",4]]]],[11,"from","","",1,[[["arc",3]]]],[11,"from","","",1,[[["arc",3]]]],[11,"from","","",1,[[["arcborrow",3],["node",3]]]],[11,"from","","",1,[[["arcborrow",3],["token",3]]]],[11,"from","","",1,[[["nodeortoken",4],["arcborrow",3],["arcborrow",3]]]],[11,"next_back","sorbus::green","",3,[[],["option",4]]],[11,"nth_back","","",3,[[],["option",4]]],[11,"next_back","","",4,[[],["option",4]]],[11,"nth_back","","",4,[[],["option",4]]],[11,"len","","",3,[[]]],[11,"len","","",4,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"count","","",3,[[]]],[11,"last","","",3,[[],["option",4]]],[11,"nth","","",3,[[],["option",4]]],[11,"fold","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"count","","",4,[[]]],[11,"last","","",4,[[],["option",4]]],[11,"nth","","",4,[[],["option",4]]],[11,"fold","","",4,[[]]],[11,"clone","","",2,[[],["builder",3]]],[11,"clone","","",3,[[],["children",3]]],[11,"clone","","",4,[[],["childrenwithoffsets",3]]],[11,"clone","","",8,[[],["checkpoint",3]]],[11,"clone","sorbus","",0,[[],["kind",3]]],[11,"clone","","",1,[[],["nodeortoken",4]]],[11,"default","sorbus::green","",2,[[],["builder",3]]],[11,"default","","",7,[[],["treebuilder",3]]],[11,"cmp","","",8,[[["checkpoint",3]],["ordering",4]]],[11,"cmp","sorbus","",0,[[["kind",3]],["ordering",4]]],[11,"eq","sorbus::green","",5,[[]]],[11,"eq","","",6,[[]]],[11,"eq","","",8,[[["checkpoint",3]]]],[11,"ne","","",8,[[["checkpoint",3]]]],[11,"eq","sorbus","",0,[[["kind",3]]]],[11,"ne","","",0,[[["kind",3]]]],[11,"eq","","",1,[[["nodeortoken",4]]]],[11,"ne","","",1,[[["nodeortoken",4]]]],[11,"partial_cmp","sorbus::green","",8,[[["checkpoint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["checkpoint",3]]]],[11,"le","","",8,[[["checkpoint",3]]]],[11,"gt","","",8,[[["checkpoint",3]]]],[11,"ge","","",8,[[["checkpoint",3]]]],[11,"partial_cmp","sorbus","",0,[[["kind",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["kind",3]]]],[11,"le","","",0,[[["kind",3]]]],[11,"gt","","",0,[[["kind",3]]]],[11,"ge","","",0,[[["kind",3]]]],[11,"fmt","sorbus::green","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","sorbus","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","sorbus::green","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",8,[[]]],[11,"hash","sorbus","",0,[[]]],[11,"hash","","",1,[[]]],[11,"unerase","sorbus::green","",5,[[["erasedptr",6]],["nonnull",3]]],[11,"unerase","","",6,[[["erasedptr",6]],["nonnull",3]]],[11,"layout_for","","",5,[[],["layout",3]]],[11,"retype","","",5,[[["nonnull",3]],["nonnull",3]]],[11,"layout_for","","",6,[[],["layout",3]]],[11,"retype","","",6,[[["nonnull",3]],["nonnull",3]]]],"p":[[3,"Kind"],[4,"NodeOrToken"],[3,"Builder"],[3,"Children"],[3,"ChildrenWithOffsets"],[3,"Node"],[3,"Token"],[3,"TreeBuilder"],[3,"Checkpoint"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);